function batchJavaDecode( infile, inDir, outDir, inFs, outFs, inExt, outExt )
%BATCHJAVADECODE Batch decode .mat files from inDir and write to outDir
%using java-based-fractal-compression
%   fileList - general file ids list exclude directory and extension
%   inDir - input directory
%   outDir - output directory
%   inFs - input sampling rate
%   outFs - output sampling rate
%   inExt - nput extension
%   outExt - output extension

%% create tempolary parameters
testname = 'wav';
injectParameters = ...
    [{'processname decompress'}, ...
    {['testname ' testname]}, ...
    {['infile ' regexprep(normpath(infile), '/', '//')]}, ...
    {['inpathprefix ' regexprep(normpath(inDir), '/', '//') '//']}, ...
    {['outdir ' regexprep(normpath(outDir), '/', '//')]}, ...
    {'maxprocess 1'}, ...
    {['inext ' inExt]}, ...
    {['outext ' outExt]}, ...
    {'reportrate 0'}, ...
    {'skipifexist false'}, ...
    {['samplingrate ' num2str(outFs)]}, ...
    {['alpha ' num2str(outFs/inFs)]}];

%% prepare parameters file
mkdir(outDir);
fileIdsDir = fullfile( outDir, 'tempParameters.txt');
fid = fopen(fileIdsDir,'w');
fprintf(fid, '%s\r\n', injectParameters{:});
fclose(fid);

% call fractal coding process
execDir = pwd;
cd F:/GitRepo/fractal-compression/AudioCompressor/target
audioCompressorVersion = char(getFCVersion());
system(['java -cp ".;lib/*;audio-compressor-' audioCompressorVersion '.jar"' ...
    ' th.ac.kmitl.it.prip.fractal.MainExecuter ' ...
    fileIdsDir], '-echo');
cd(execDir);

end

